name: PR Label & Project Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, review_requested, closed]

jobs:
  auto-label-and-project:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v42

      - name: Debug changed files
        run: echo "Changed files: ${{ steps.changed_files.outputs.all_changed_files }}"

      # 라벨 자동 추가 (opened, synchronize, reopened 이벤트에만)
      - name: Add labels based on paths
        if: or(github.event.action == 'opened', github.event.action == 'synchronize', github.event.action == 'reopened')
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            ${{ contains(steps.changed_files.outputs.all_changed_files, 'frontend/') && 'scope:fe' || '' }}
            ${{ contains(steps.changed_files.outputs.all_changed_files, 'backend/') && 'scope:be' || '' }}
            ${{ contains(steps.changed_files.outputs.all_changed_files, '.github/') && 'scope:infra' || '' }}

      # 프로젝트 칼럼 자동 이동
      - name: Move PR in GitHub Projects
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              console.log("This event has no pull_request payload. Skipping.");
              return;
            }

            const projectNumber = 5; // 프로젝트 번호 (#5)
            const columnTodo = "Todo";
            const columnInProcess = "In Process";
            const columnInReview = "In Review";
            const columnDone = "Done";

            // 프로젝트 조회
            const { data: projects } = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const project = projects.find(p => p.number === projectNumber);
            if (!project) {
              console.log(`❌ 프로젝트 #${projectNumber} 을(를) 찾을 수 없습니다.`);
              return;
            }
            console.log(`✅ 프로젝트 찾음: ${project.name} (ID: ${project.id})`);

            // 프로젝트 칼럼 조회
            const { data: columns } = await github.rest.projects.listColumns({
              project_id: project.id,
            });

            function findColumn(name) {
              const col = columns.find(c => c.name === name);
              if (!col) {
                console.log(`⚠️ 칼럼 '${name}' 을(를) 찾을 수 없습니다.`);
                return null;
              }
              return col.id;
            }

            // 이벤트별 칼럼 결정
            let targetColumn = null;

            if (context.payload.action === "opened" || context.payload.action === "reopened") {
              targetColumn = findColumn(columnTodo);
            } else if (context.payload.action === "synchronize") {
              targetColumn = findColumn(columnInProcess);
            } else if (context.payload.action === "review_requested" || context.payload.action === "ready_for_review") {
              targetColumn = findColumn(columnInReview);
            } else if (context.payload.action === "closed" && pr.merged) {
              targetColumn = findColumn(columnDone);
            }

            if (!targetColumn) {
              console.log("ℹ️ 이동할 칼럼이 없어 작업하지 않습니다.");
              return;
            }

            console.log(`➡️ PR #${pr.number} 을(를) '${targetColumn}' 칼럼으로 이동 처리 중...`);

            // 기존 카드 중 해당 PR 카드가 targetColumn에 이미 있는지 확인
            const { data: cards } = await github.rest.projects.listCards({
              column_id: targetColumn,
            });

            const existingCard = cards.find(card => card.content_url && card.content_url.endsWith(`/pulls/${pr.number}`));

            if (existingCard) {
              console.log(`ℹ️ PR 카드가 이미 칼럼에 존재합니다. 이동 작업 생략.`);
              return;
            }

            // PR 카드 생성
            await github.rest.projects.createCard({
              column_id: targetColumn,
              content_id: pr.id,
              content_type: "PullRequest"
            });

            console.log(`✅ PR #${pr.number} 카드를 '${targetColumn}' 칼럼에 생성했습니다.`);
